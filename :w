class PeakDayService
  def self.call(cycle)
    new(cycle).call
  end

  def initialize(days)
    self.days = days
  end

  attr_accessor :cycle, :days

  def call
    candidates = []
    days.sort_by(&:number).each do |day|
      candidates << day.number if _is_local_peak?(day)
    end
    binding.pry


    return "unknown" if candidates.empty?

    candidates.last
  end

  def _is_local_peak?(day)
    binding.pry
    return false unless day.more_fertile?

    next_day = _next_day(day)

    return false unless next_day.present?

    next_day.medium_fertile? || next_day.less_fertile?
  end

  def _next_day(day)
    Day.where(cycle_id: day.cycle_id, number: day.number + 1).first
    # current_number = day.number
    # days.select do |candidate|



  end
end
